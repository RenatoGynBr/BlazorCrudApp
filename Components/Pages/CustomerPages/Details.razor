@page "/customers/details"
@using Microsoft.EntityFrameworkCore
@using BlazorCrudApp.Models
@inject IDbContextFactory<BlazorCrudApp.Data.BlazorCrudAppContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Customer</h2>
    <hr />
    @if (customer is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">FirstName</dt>
            <dd class="col-sm-10">@customer.FirstName</dd>
            <dt class="col-sm-2">LastName</dt>
            <dd class="col-sm-10">@customer.LastName</dd>
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@customer.Email</dd>
            <dt class="col-sm-2">PhoneNumber</dt>
            <dd class="col-sm-10">@customer.PhoneNumber</dd>
            <dt class="col-sm-2">Address</dt>
            <dd class="col-sm-10">@customer.Address</dd>
            <dt class="col-sm-2">City</dt>
            <dd class="col-sm-10">@customer.City</dd>
            <dt class="col-sm-2">State</dt>
            <dd class="col-sm-10">@customer.State</dd>
            <dt class="col-sm-2">Country</dt>
            <dd class="col-sm-10">@customer.Country</dd>
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@customer.DateCreated</dd>
        </dl>
        <div>
            <a href="@($"/customers/edit?accountid={customer.AccountId}")">Edit</a> |
            <a href="@($"/customers")">Back to List</a>
        </div>
    }
</div>

@code {
    private Customer? customer;

    [SupplyParameterFromQuery]
    private int AccountId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        customer = await context.Customer.FirstOrDefaultAsync(m => m.AccountId == AccountId);

        if (customer is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
